/* REXX */
/*                                       */
/* AUTHOR: Mark Zelden                   */
/*                                       */
/* Trace ?r */
/*********************************************************************/
/* DISPLAY SYSTEM INFORMATION ON TERMINAL                            */
/*********************************************************************/
clr
Call RDATE TODAY                             /* call RDATE subroutine*/
DAY      = Word(RESULT,3)                    /* weekday from RDATE   */
DATE     = Substr(RESULT,1,10)               /* date as MM/DD/YYYY   */
JUL      = Substr(RESULT,7,8)                /* date as YYYY.DDD     */
/*                                                                   */
CVT      = C2d(Storage(10,4))                /* point to CVT         */
/*                                                                   */
JESCT    = C2d(Storage(D2x(CVT + 296),4))    /* point to JESCT       */
/*                                                                   */
CVTGDA   = C2d(Storage(D2x(CVT + 560),4))    /* point to GDA         */
GDAPVTSZ = C2d(Storage(D2x(CVTGDA + 164),4)) /* point to MAX PVT<16M */
GDAPVTSZ = GDAPVTSZ/1024                     /* convert to kbytes    */
/*                                                                   */
RESUCB   = C2d(Storage(D2x(JESCT + 4),4))    /* point to SYSRES UCB  */
JESNAME  = Storage(D2x(JESCT + 28),4)        /* point to JESNAME     */
/*                                                                   */
IPLADDR  = Storage(D2x(RESUCB + 13),3)       /* point to IPL address */
IPLVOL   = Storage(D2x(RESUCB + 28),6)       /* point to IPL volume  */
/*                                                                   */
CVTEXT2  = C2d(Storage(D2x(CVT + 328),4))    /* point to CVTEXT2     */
CVTATCVT = C2d(Storage(D2x(CVTEXT2 + 65),3)) /* point to VTAM AVT    */
ISTATCVT = C2d(Storage(D2x(CVTATCVT + 0),4)) /* point to VTAM CVT    */
ATCVTLVL = Storage(D2x(ISTATCVT + 0),8)      /* VTAM Rel Lvl VOVRP   */
VTAMVER  = Substr(ATCVTLVL,3,1)              /* VTAM Version   V     */
VTAMREL  = Substr(ATCVTLVL,4,1)              /* VTAM Release    R    */
VTAMMOD  = Substr(ATCVTLVL,5,1)              /* VTAM Mod Lvl     P   */
If VTAMMOD = ' ' then VTAMLEV = 'V'|| VTAMVER || 'R' || VTAMREL
   else VTAMLEV = 'V' || VTAMVER || 'R' || VTAMREL || 'M' || VTAMMOD
/*                                                                   */
AMCBS    = C2d(Storage(D2x(CVT + 256),4))    /* point to AMCBS       */
ACB      = C2d(Storage(D2x(AMCBS + 8),4))    /* point to ACB         */
CAXWA    = C2d(Storage(D2x(ACB + 64),4))     /* point to CAXWA       */
MCATDSN  = Storage(D2x(CAXWA + 52),44)       /* master catalog dsn   */
MCATDSN  = Strip(MCATDSN,T)                  /* remove trailing blnks*/
MCATUCB  = C2d(Storage(D2x(CAXWA + 28),4))   /* point to mcat UCB    */
MCATVOL  = Storage(D2x(MCATUCB + 28),6)      /* master catalog VOLSER*/
/*                                                                   */
SMCA     = Storage(D2x(CVT + 196),4)         /* point to SMCA        */
SMCA     = Bitand(SMCA,'7FFFFFFF'x)          /* zero high order bit  */
SMCA     = C2d(SMCA)                         /* convert to decimal   */
/*                                                                   */
/*********************************************************************/
/*  The IPL date is stored in packed decimal format - so to make     */
/*  the date printable, it needs to be converted back to hex and     */
/*  the packed sign needs to be removed.                             */
/*********************************************************************/
IPLTIME  = C2d(Storage(D2x(SMCA + 336),4))   /* IPL Time - binary    */
IPLDATE  = C2d(Storage(D2x(SMCA + 340),4))   /* IPL Date - 0CYYDDDF  */
If IPLDATE  >= 16777231 then do              /*          is C = 1 ?  */
  IPLDATE  = D2x(IPLDATE)                    /* convert back to hex  */
  IPLDATE  = Substr(IPLDATE,2,5)             /* keep YYDDD           */
  IPLDATE  = '20'IPLDATE                     /* use 21st century date*/
End
Else do
  IPLDATE  = D2x(IPLDATE)                    /* convert back to hex  */
  IPLDATE  = Left(IPLDATE,5)                 /* keep YYDDD           */
  IPLDATE  = '19'IPLDATE                     /* use 20th century date*/
End
IPLYYYY  = Substr(IPLDATE,1,4)               /* YYYY portion of date */
IPLDDD   = Substr(IPLDATE,5,3)               /* DDD  portion of date */
Call RDATE IPLYYYY IPLDDD                    /* call RDATE subroutine*/
IPLDAY   = Word(RESULT,3)                    /* weekday from RDATE   */
IPLDATE  = Substr(RESULT,1,10)               /* date as MM/DD/YYYY   */
IPLJUL   = Substr(RESULT,7,8)                /* date as YYYY.DDD     */
IPLTIME  = IPLTIME / 100                     /* remove hundreths     */
HH       = IPLTIME % 3600                    /* IPL hour             */
MM       = (IPLTIME - (3600 * HH)) % 60      /* IPL minute           */
SS       = (IPLTIME - (3600 * HH)  - (60 * MM)) % 1  /* IPL seconds  */
HH       = Right(HH,2,'0')                   /* ensure 2 digit HH    */
MM       = Right(MM,2,'0')                   /* ensure 2 digit MM    */
SS       = Right(SS,2,'0')                   /* ensure 2 digit SS    */
IPLTIME  = HH':'MM':'SS                      /* time in HH:MM format */
/*                                                                   */
ASMVT    = C2d(Storage(D2x(CVT + 704),4))    /* point to ASMVT       */
CLPABYTE = Storage(D2x(ASMVT + 1),1)         /* point to CLPA byte   */
CHKCLPA  = Bitand(CLPABYTE,'8'x)             /* check for B'1000'    */
CHKCLPA  = C2d(CHKCLPA)                      /* convert to decimal   */
If CHKCLPA < 8 then IPLCLPA = '(with CLPA)'  /* bit off - CLPA       */
  Else IPLCLPA = '(without CLPA)'            /* bit on  - no CLPA    */
/*                                                                   */
SMFNAME  = Storage(D2x(SMCA + 16),4)         /* point to SMF name    */
/*                                                                   */
PRODNAME = Storage(D2x(CVT - 40),7)          /* point to mvs version */
FMIDNUM  = Storage(D2x(CVT - 32),7)          /* point to fmid        */
/*                                                                   */
GRSNAME  = Storage(D2x(CVT + 340),8)         /* point to system name */
GRSNAME  = Strip(GRSNAME,T)                  /* del trailing blanks  */
/*                                                                   */
STORSIZE = C2d(Storage(D2x(CVT + 856),4))    /* point to storage size*/
STORSIZE = STORSIZE/1024                     /* convert to Megabytes */
/*                                                                   */
RCE      = C2d(Storage(D2x(CVT + 1168),4))   /* point to RCE         */
ESTOR    = C2d(Storage(D2x(RCE + 160),4))    /* point to ESTOR frames*/
ESTOR    = ESTOR*4/1024                      /* convert to Megabytes */
/*********************************************************************/
/*  The CPU model is stored in packed decimal format with no sign,   */
/*  so to make the model printable, it needs to be converted back    */
/*  to hex.                                                          */
/*********************************************************************/
MODEL    = C2d(Storage(D2x(CVT - 6),2))      /* point to cpu model   */
MODEL    = D2x(MODEL)                        /* convert back to hex  */
/*                                                                   */
CSD      = C2d(Storage(D2x(CVT + 660),4))    /* point to CSD         */
NUMCPU   = C2d(Storage(D2x(CSD + 10),2))     /* point to # of CPUS   */
/*                                                                   */
/*********************************************************************/
/*   Write  information to terminal.                                 */
/*********************************************************************/
Say '***********************************************************' || ,
    '******************'
Say '***************************  SYSTEM INFORMATION  **********' ||,
    '******************'
Say '***********************************************************' || ,
    '******************'
Say ''
Say 'Today is 'DAY DATE '('JUL').'
Say 'The last IPL was 'IPLDAY IPLDATE '('IPLJUL')' ,
     'at 'IPLTIME IPLCLPA'.'
Say 'The system IPL address was 'IPLADDR' ('IPLVOL').'
If Substr(PRODNAME,3,1) > 3 then do
  ECVT     = C2d(Storage(D2x(CVT + 140),4))  /* point to CVTECVT     */
  IPLPARM  = Storage(D2x(ECVT+160),8)        /* point to LOAD PARM   */
  IPLPARM  = Strip(IPLPARM,T)                /* del trailing blanks  */
  SEPPARM  = Substr(IPLPARM,1,4) Substr(IPLPARM,5,2),
             Substr(IPLPARM,7,1) Substr(IPLPARM,8,1)
  Say 'The IPL LOAD PARM used was 'IPLPARM' ('SEPPARM').'
End
If Substr(PRODNAME,3,1) < 5 then do
  IOCON    = Storage(D2x(CVTEXT2 + 6),2)       /* HCD IODFxx or MVSCP*/
                                               /* IOCONFIG ID=xx     */
  Say 'The currently active IOCONFIG or HCD IODF is 'IOCON'.'
End
Else do
  CVTIXAVL = C2d(Storage(D2x(CVT+124),4))    /* point to IOCM        */
  IOCIOVTP = C2d(Storage(D2x(CVTIXAVL+208),4)) /* pt to IOS Vect Tbl */
  IODF     = Storage(D2X(IOCIOVTP+288),11)   /* point to IODF name   */
  CONFIGID = Storage(D2X(IOCIOVTP+348),8)    /* point to CONFIG      */
  EDT      = Storage(D2X(IOCIOVTP+360),2)    /* point to EDT         */
  IOPROC   = Storage(D2X(IOCIOVTP+380),8)    /* point to IODF Proc   */
  IODATE   = Storage(D2X(IOCIOVTP+412),8)    /* point to IODF date   */
  IOTIME   = Storage(D2X(IOCIOVTP+420),8)    /* point to IODF time   */
  IODESC   = Storage(D2X(IOCIOVTP+428),16)   /* point to IODF desc   */
  Say 'The currently active IODF data set is 'IODF'.'
  Say '  Configuration ID =' CONFIGID ' EDT ID =' EDT
  Say '  TOKEN: Processor  Date      Time      Description'
  Say '         'IOPROC'   'IODATE'  'IOTIME'  'IODESC
End
Say 'The Master Catalog is 'MCATDSN' on 'MCATVOL'.'
Say ''
If Substr(PRODNAME,3,1) < 6 then
  Say 'The MVS version is 'PRODNAME' - FMID 'FMIDNUM'.'
Else do
  PRODNAME = Storage(D2x(ECVT+496),16)       /* point to product name*/
  PRODNAME = Strip(PRODNAME,T)               /* del trailing blanks  */
  VER      = Storage(D2x(ECVT+512),2)        /* point to version     */
  REL      = Storage(D2x(ECVT+514),2)        /* point to release     */
  MOD      = Storage(D2x(ECVT+516),2)        /* point to mod level   */
  VRM      = VER'.'REL'.'MOD
  Say 'The OS version is 'PRODNAME VRM' - FMID 'FMIDNUM'.'
End
Say 'The VTAM Level is 'VTAMLEV'.'
Say 'The primary job entry subsystem is 'JESNAME'.'
Say 'The GRS system id is 'GRSNAME'. The SMF system id is 'SMFNAME'.'
  Say 'The real storage size is 'Format(STORSIZE,,0)'M.'
If ESTOR > 0 then do
  Say 'The expanded storage size is 'ESTOR'M.'
End
Else
  Say 'The system has no expanded storage.'
Say 'The maximum private area size below the line is 'gdapvtsz'K.'
Say ''
Say 'The CPU model number is 'MODEL'.'
Say 'The number of online CPUs is 'NUMCPU'.'
/*                                                                   */
PCCAVT    = C2d(Storage(D2x(CVT + 764),4))   /* point to PCCA vect tb*/
/*                                                                   */
CPNUM     = 0
FOUNDCPUS = 0
Do until FOUNDCPUS = NUMCPU
PCCA = C2d(Storage(D2x(PCCAVT + CPNUM*4),4)) /* point to PCCA        */
  If PCCA ¬= 0 then do
    CPUID   = Storage(D2x(PCCA + 6),10)      /* point to CPUID       */
    IDSHORT = Substr(CPUID,2,5)
    Say 'The CPU serial number for CPU 'CPNUM' is 'CPUID' ('IDSHORT').'
    FOUNDCPUS = FOUNDCPUS + 1
  End
CPNUM = CPNUM + 1
End  /* do until  */
Say ''
Exit
/* rexx */
RDATE:
/*                           */
/* AUTHOR: MARK ZELDEN       */
/*  3D Business solutions    */
/*                           */
/************************************************/
/* Convert MM DD YYYY or YYYY DDD to standard   */
/* date output that inclues the day of week and */
/* the century date. A parm of "TODAY" can also */
/* be passed to the date conversion routine.    */
/* The output format is always as follows:      */
/*      MM/DD/YYYY.JJJ CCCCC WEEKDAY            */
/* The above value will be put in the special   */
/* REXX variable "RESULT"                       */
/* example: CALL RDATE TODAY                    */
/* example: CALL RDATE 1996 300                 */
/* example: CALL RDATE 10 26 1996               */
/* result:  10/26/1996.300 35363 Saturday       */
/************************************************/
arg P1 P2 P3

JULTBL = '000031059090120151181212243273304334'
DAY.0 = 'Sunday'
DAY.1 = 'Monday'
DAY.2 = 'Tuesday'
DAY.3 = 'Wednesday'
DAY.4 = 'Thursday'
DAY.5 = 'Friday'
DAY.6 = 'Saturday'

Select
  When P1 = 'TODAY' then do
    P1 = Substr(date('s'),5,2)
    P2 = Substr(date('s'),7,2)
    P3 = Substr(date('s'),1,4)
    call CONVERT_MDY
    call THE_END
  end
  When P3 = '' then do
    call CONVERT_JDATE
    call DOUBLE_CHECK
    call THE_END
  end
  otherwise do
    call CONVERT_MDY
    call DOUBLE_CHECK
    call THE_END
  end
end /* end select */
/* say RDATE_VAL  */
return RDATE_VAL
/**********************************************/
/*  E N D    O F   M A I N L I N E   C O D E  */
/**********************************************/

CONVERT_MDY:
if P1<1 | P1>12 then do
  say 'Invalid month passed to date routine'
  exit 12
end
if P2<1 | P2>31 then do
  say 'Invalid day passed to date routine'
  exit 12
end
if (P1=4 | P1=6 | P1=9 | P1=11) & P2>30 then do
  say 'Invalid day passed to date routine'
  exit 12
end
if P3<1900 | P3>2099 then do
  say 'Invalid year passed to date routine'
  exit 12
end
BASE   = Substr(JULTBL,((P1-1)*3)+1,3)
if (P3//4=0 & P3¬=1900) then LEAP= 1
  else LEAP = 0
if P1 > 2 then BASE = BASE+LEAP
JJJ = BASE + P2

MM   = P1
DD   = P2
YYYY = P3
return

CONVERT_JDATE:
if P1<1900 | P1>2099 then do
  say 'Invalid year passed to date routine'
  exit 12
end
if P2<1 | P2>366 then do
  say 'Invalid Julian date passed to date routine'
  exit 12
end
if (P1//4=0 & P1¬=1900) then LEAP= 1
  else LEAP = 0
ADJ1 = 0
ADJ2 = 0
Do MM = 1 to 11
   VAL1 = Substr(JULTBL,((MM-1)*3)+1,3)
   VAL2 = Substr(JULTBL,((MM-1)*3)+4,3)
   if MM >=2 then ADJ2 = LEAP
   if MM >=3 then ADJ1 = LEAP
   if P2 > VAL1+ADJ1 & P2 <= VAL2+ADJ2 then do
        DD = P2-VAL1-ADJ1
        MATCH = 'Y'
        leave
   end
end
if MATCH ¬= 'Y' then do
    MM = 12
    DD = P2-334-LEAP
end

YYYY = P1
JJJ  = P2
return

DOUBLE_CHECK:
if MM = 2 then do
   if DD > 28 & LEAP = 0 then do
     say 'Invalid day passed to date routine'
     exit 12
   end
   if DD > 29 & LEAP = 1 then do
     say 'Invalid day passed to date routine'
     exit 12
   end
end
if LEAP = 0 & JJJ > 365 then do
  say 'Invalid Julian date passed to date routine'
  exit 12
end
return

THE_END:
YRC = YYYY-1900
CCCCC = (YRC*365) +(YRC+3)%4 + JJJ
if YYYY > 1900 then CCCCC = CCCCC-1
INDEX   = CCCCC//7  /* index to DAY stem */
WEEKDAY =  DAY.INDEX

DD      = Right(DD,2,'0')
MM      = Right(MM,2,'0')
CCCCC   = Right(CCCCC,5,'0')
JJJ     = Right(JJJ,3,'0')

RDATE_VAL = MM||'/'||DD||'/'||YYYY||'.'||JJJ||' '||CCCCC||' '||WEEKDAY
return
